TO ONE CLIENT ONLY

    TO SENDER CLIENT  ONLY
    // sending to sender-client only
    socket.emit('message', "this is a test");

    TO INDIVIDUAL CLIENT ONLY
    // sending to individual socketid (server-side)
    socket.broadcast.to(socketid).emit('message', 'for your eyes only');


TO EVERYONE 

    INCLUDING CLIENT

    // sending to all clients, include sender
    io.emit('message', "this is a test");

    EXCLUDING CLIENT

    // sending to all clients except sender
    socket.broadcast.emit('message', "this is a test");


    // simply use to or in (they are the same) when broadcasting or emitting (server-side)
    io.to('some room').emit('some event'):

    // leave to unsubscribe the socket to a given channel (server-side)
    socket.leave('some room');

ROOMS

    JOIN A ROOM

    // join to subscribe the socket to a given channel (server-side):
    socket.join('some room');

    TO ALL EXCEPT SENDER

    // sending to all clients in 'game' room(channel) except sender
    socket.broadcast.to('game').emit('message', 'nice game');

    TO ALL INCLUDING SENDER

    // sending to all clients in 'game' room(channel), include sender
    io.in('game').emit('message', 'cool game');

    ONLY TO SENDER CLIENT

    // sending to sender client, only if they are in 'game' room(channel)
    socket.to('game').emit('message', 'enjoy the game');

TO NAMESPACE

    // sending to all clients in namespace 'myNamespace', include sender
    io.of('myNamespace').emit('message', 'gg');



